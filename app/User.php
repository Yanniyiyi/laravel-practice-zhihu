<?php

namespace App;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Notifications\Notifiable;
use Illuminate\Foundation\Auth\User as Authenticatable;
use App\Follower;
use App\Notifications\NewFollowedUserNotification;

class User extends Authenticatable
{
    use Notifiable;
    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub
        
    }

    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = [
        'name', 'email', 'password', 'avatar', 'confirmation_token', 'api_token'
    ];

    /**
     * The attributes that should be hidden for arrays.
     *
     * @var array
     */
    protected $hidden = [
        'password', 'remember_token',
    ];

    public function owns(Model $model)
    {
        return $this->id == $model->user_id;
    }

    public function answers()
    {
        return $this->hasMany(Answer::class);
    }

    public function votedThisAnswer($answer)
    {
        return !!$this->votedAnswers()->where('answer_id', $answer)->count();
    }

    public function votedAnswers()
    {
        return $this->belongsToMany(Answer::class, 'votes')->withTimeStamps();
    }

    public function toggleVoteFor($answer)
    {
        $result = $this->votedAnswers()->toggle($answer);
        if (count($result['attached']) > 0) {
            Answer::find($answer)->increment('votes_count');
            return true;
        }
        Answer::find($answer)->decrement('votes_count');
        return false;
    }

    public function followedThisQuestion($question)
    {
        return !!$this->followedQuestions()->where('question_id', $question)->count();
    }

    public function followedQuestions()
    {
        return $this->belongsToMany(Question::class, 'user_question')->withTimeStamps();
    }

    public function toggleFollowQuestion($question)
    {
        $result = $this->followedQuestions()->toggle($question);
        if (count($result['attached']) > 0) {
            Question::find($question)->increment('followers_count');
            return true;
        }
        Question::find($question)->decrement('followers_count');
        return false;
    }

    public function followedThisUser($user)
    {
        return !!$this->followedUsers()->where('followed_id', $user)->count();
    }

    public function followedUsers()
    {
        return $this->belongsToMany(self::class, 'followers', 'follower_id', 'followed_id')->withTimeStamps();
    }

    public function toggleFollowUser($user)
    {
        $result = $this->followedUsers()->toggle($user);
        if (count($result['attached']) > 0) {
            $userToFollow = User::find($user);
            $userToFollow->increment('followers_count');
            $userToFollow->notify(new NewFollowedUserNotification());
            return true;
        }
        User::find($user)->decrement('followers_count');
        return false;
    }

    public function messages()
    {
        return $this->hasMany(Message::class, 'to_user_id');
    }
}
